%% software-and-experiments.tex  
% цей розділ висвітлює програмне рішенні та результати експериментів дослідження
\chapter{Методи та засоби вирішення проблеми}\label{ch:03}

    
\section{Вибір та обґрунтування методів вирішення проблеми}
  
  До способів візуального або графічного представлення даних відносять графіки, діаграми, таблиці, звіти, списки, структурні схеми, карти, тощо.
  
 Візуалізація традиційно розглядалася як допоміжний засіб при аналізі даних, проте зараз все більше досліджень говорить про її самостійну ролі.

Традиційні методи візуалізації можуть знаходити наступне застосування:
\begin{itemize}
 \item представляти користувачеві інформацію в наочному вигляді; 
 \item компактно описувати закономірності, притаманні початкового набору даних;
 \item знижувати розмірність або стискати інформацію;
 \item відновлювати прогалини в наборі даних;
 \item знаходити шуми і викиди в наборі даних.
 \end{itemize}
 
 Діаграми і графіки розсіювання часто використовуються для оцінки якості роботи того чи іншого методу.
 
 Всі способи візуального представлення і відображення даних можуть виконувати одну з функцій:
 \begin{itemize}
 \item є ілюстрацією побудови моделі (наприклад, представлення структури (графа) нейронної мережі);
 \item допомагають інтерпретувати отриманий результат;
 \item є засобом оцінки якості побудованої моделі;
 \item поєднують перераховані вище функції.
 \end{itemize}
 
 Методи візуалізації, залежно від кількості використовуваних вимірювань, прийнято класифікувати на дві групи:
\begin{itemize}
 \item представлення даних в одному, двох або трьох вимірах;
 \item представення даних в чотирьох і більше вимірах.
 \end{itemize} 
 
 До першої групи методів належать добре відомі способи відображення інформації, які доступні для сприйняття людською уявою. Практично будь-який сучасний інструмент візуалізації включає способи візуального представлення з цієї групи.

 Відповідно до кількості вимірів представлення це можуть бути такі способи: 
 \begin{itemize}
 \item одномірне (univariate) вимір, або 1-D;
 \item двовимірне (bivariate) вимір, або 2-D;
 \item тривимірне або проекційне (projection) вимір, або 3-D.
 \end{itemize}
 
 Слід зауважити, що найбільш природно людське око сприймає двомірні представлення інформації.
 
 При використанні дво- і тривимірного представлення інформації користувач має можливість побачити закономірності набору даних:
 \begin{itemize}
 \item його кластерну структуру і розподіл об'єктів на класи (наприклад, на діаграмі розсіювання);
 \item топологічні особливості;
 \item наявність трендів;
 \item інформацію про взаємне розташування даних;
 \item існування інших залежностей, властивих досліджуваному набору даних.
 \end{itemize}
 
 Якщо набір даних має більше трьох вимірів, то можливі такі варіанти:
  \begin{itemize}
 \item використання багатовимірних методів представлення інформації;
 \item зниження розмірності до одно-, дво- або тривимірного представлення. Існують різні способи зниження розмірності, один з них --- факторний аналіз. Для зниження розмірності і одночасного візуального представлення інформації на двовимірної мапі використовуються самоорганізовані карти Кохонена.
 \end{itemize}
 
 Подання інформації в чотиривимірному і більше вимірах недоступні для людського сприйняття. Однак розроблені спеціальні методи для можливості відображення і сприйняття людиною такої інформації.
 
 Найбільш відомі способи багатовимірного представлення інформації:
 \begin{itemize}
 \item паралельні координати;
 \item "обличчя Чернова";
 \item пелюсткові діаграми.
 \end{itemize}
 
Перед використанням методів візуалізації необхідно:
\begin{itemize}
 \item Проаналізувати, чи слід зображати всі дані або ж якусь їх частину.
 \item Вибрати розміри, пропорції та масштаб зображення.
 \item Вибрати метод, який може найбільш яскраво відобразити закономірності, притаманні набору даних.
 \end{itemize}
 
 Багато сучасних засобів аналізу даних дозволяють будувати сотні типів різних графіків і діаграм. Тому вибір методу візуалізації, якщо він самостійно здійснюється користувачем, не такий простий, як може здатися на перший погляд. Наявність великої кількості засобів візуалізації, представлених в інструменті, який застосовує користувач, може навіть викликати розгубленість.

Одну й ту ж інформацію можна представити за допомогою різних засобів. Для того щоб засіб візуалізації могло виконувати своє основне призначення --- подавати інформацію в простому і доступному для людського сприйняття вигляді --- необхідно дотримуватися законів відповідності обраного рішення змістом інформації та її функціональним призначенням. Потрібно зробити так, щоб при погляді на візуальне представлення інформації можна було відразу виявити закономірності у вихідних даних і приймати на їх основі рішення.

Серед двовимірних і тривимірних засобів найбільш широко використовуються відомі лінійні графіки, лінійні, стовпчикові, кругові секторні і векторні діаграми.


За допомогою лінійного графіка можна відобразити тенденцію, передати зміни якої-небудь ознаки в часі. Для порівняння декількох рядів чисел такі графіки наносяться на одні й ті ж осі координат.

Гістограму застосовують для порівняння значень протягом деякого періоду або ж співвідношення величин.

Кругові діаграми використовують, якщо необхідно відобразити співвідношення частин і цілого, тобто для аналізу складу або структури явищ. Складові частини цілого зображуються секторами кола. Сектори рекомендують розміщувати за їх величиною: вгорі --- найбільший, решту --- по руху годинникової стрілки в порядку зменшення їх величини. Кругові діаграми також застосовують для відображення результатів факторного аналізу, якщо дії всіх факторів є односпрямованим. При цьому кожен фактор відображається у вигляді одного з секторів круга.

Вибір того чи іншого засобу візуалізації залежить від поставленого завдання (наприклад, потрібно визначити структуру даних або ж динаміку процесу) і від характеру набору даних.

Для реалізації даної системи я використовуватиму метод двовимірного представлення даних \cite{6}.
 
\section{Вибір та обґрунтування засобів вирішення проблеми}


\subsection{Порівняльна характерика мов програмування для веб-розробок} \hspace{\parindent}

Під час розробки програмного продукту велика увага віднесена на вибір мови. Із часу створення перших програмувальних машин людство придумало вже більш восьми з половиною тисяч мов програмування. Щороку їх число поповнюється новими. Деякими мовами вміє користуватися тільки невелике число їх власних розроблювачів, інші стають відомі мільйонам людей. 

\textit{PHP} --- скриптова мова програмування, була створена для генерації HTML-сторінок на стороні веб-сервера. PHP є однією з найпоширеніших мов, що використовуються у сфері веб-розробок. PHP підтримується переважною більшістю хостинг-провайдерів. PHP --- проект відкритого програмного забезпечення.

PHP інтерпретується веб-сервером у HTML-код, який передається на сторону клієнта. На відміну від скриптової мови JavaScript, користувач не бачить PHP-коду, бо браузер отримує готовий html-код. Це є перевага з точки зору безпеки, але погіршує інтерактивність сторінок. Але ніщо не забороняє використовувати PHP для генерування і JavaScript-кодів які виконуються вже на стороні клієнта.

PHP --- мова, код якої можна вбудовувати безпосередньо в html-код сторінок, які, у свою чергу, будуть коректно оброблені PHP-інтерпретатором. Обробник РНР просто починає виконувати код після відкриваючого тегу (<?php) і продовжує виконання до того моменту, поки не зустріне закриваючий тег (?>).

Велика різноманітність функцій PHP дає можливість уникати написання багаторядкових функцій, призначених для користувача, як це відбувається в C або Pascal.

Мова PHP здаватиметься знайомою програмістам, що працюють в різних областях. Багато конструкцій мови запозичені з С, Perl. Код РНР дуже схожий на той, який зустрічається в типових програмах на С або Pascal. Це помітно знижує початкові зусилля при вивченні PHP. PHP — мова, що поєднує переваги Perl і С і спеціально спрямована на роботу в Інтернеті, мова з універсальним і зрозумілим синтаксисом. І хоча PHP є досить молодою мовою, вона здобула таку популярність серед web-програмістів, що в наш час є мало не найпопулярнішою мовою для створення веб-застосунків (скриптів).

Ефективність є дуже важливим чинником у програмуванні для середовищ розрахованих на багато користувачів, до яких належить і web. Важливою перевагою PHP є те, що ця мова належить до інтерпретованих. Це дозволяє обробляти сценарії з достатньо високою швидкістю. За деякими оцінками, більшість PHP-сценаріїв (особливо не дуже великих розмірів) обробляються швидше за аналогічні їм програми, написані на Perl. Проте хоч би що робили розробники PHP, виконавчі файли, отримані за допомогою компіляції, працюватимуть значно швидше --- в десятки, а іноді і в сотні разів. Але продуктивність PHP достатня для створення цілком серйозних веб-застосунків.

\textit{Мова розмітки гіпертекстових документів HTML}. Обмін інформацією в Інтернет здійснюється за допомогою протоколів прикладного рівня, що реалізують той або інший прикладний сервіс (пересилку файлів, гіпертекстової інформації, пошта і так далі). Одним з найбільш молодих і популярних сервісів Інтернет, розвиток якого і привело до сплеску популярності самої Інтернет, стала World Wide Web (WWW), заснована на протоколі HTTP (Hyper Text Transfer Protocol --- протокол передачі гіпертекстовій інформації). Гіпертекстові документи, представлені в WWW, мають одну принципову відмінність від традиційних гіпертекстових документів --- зв'язки, в них що використовуються, не обмежені одним документом, і більш того, не обмежені одним комп'ютером. Для підготовки гіпертекстових документів використовується мова HTML (Hyper Text Markup Language --- мова розмітки гіпертекстових документів), що надає широкі можливості по форматуванню і структурній розмітці документів, організації зв'язків між різними документами, засоби включення графічної і мультимедійної інформації. HTML-документи є видимими за допомогою спеціальної програми --- браузера. Найбільшого поширення в даний час набули браузеры Mozilla Firefox і Internet Explorer компанії Microsoft (MSIE). Реалізації Mozilla Firefox доступні практично для всіх сучасних програмних і апаратних платформ, реалізації MSIE доступні для всіх Windows платформ, Macintosh і деяких комерційних Unix-систем.

HTML-документ складається з тексту, що є змістом документа, і тегів, що визначають його структуру і зовнішній вигляд при відображенні браузером. Тег є ключовим словом, поміщеним в кутові дужки. Розрізняють одинарні теги, як, наприклад, <p>, і парні, як <body> </body>, в останньому випадку дія тега розповсюджується тільки на текст між його відкриваючою і закриваючою дужкою. Текст всього документа полягає в теги <html>, сам документ розбивається на дві частини --- заголовок і тіло. Заголовок описується тегами <head>, в яких можуть бути включені назва документа (за допомогою тегов <title>) і інші параметри, що використовуються браузером при відображенні документа. Тіло документа поміщене в теги <body> і містить власне інформацію, яку бачить користувач. За відсутності тегів форматування весь текст виводиться у вікно браузера суцільним потоком, переклади рядків, пропуски і табуляції розглядаються як пробільні символи, декілька пробільних символів, що йдуть підряд, замінюються на один. 

З моменту свого створення, HTML і пов'язані з нею протоколи порівняно швидко отримали визнання. Однак, в перші роки існування цієї мови розмітки не було жодних чітких стандартів. Хоча її творці спочатку і задумували HTML як семантичну мову, позбавлену презентаційних можливостей, її практичне використання із різними браузерами призвело до додавання багатьох презентаційних елементів і атрибутів в HTML. 

Останні стандарти пов'язані з HTML відображають зусилля з подолання хаотичного розвитку мови і створення раціональної основи для розробки як змістовних, так і виразних документів. Щоб повернути HTML її роль семантичної мови, Консорціум Всесвітньої павутини розробив мови стилізування такі як Каскадні таблиці стилів та Розширена мова таблиць стилів, аби перенести на них відповідальність за вигляд документу. У зв'язку з цим, специфікація HTML повільно почала повертатися виключно до семантичних елементів.

\textit{CSS}. Каскадні таблиці стилів (англ. Cascading Style Sheets або скорочено CSS) --- спеціальна мова, що використовується для відображення сторінок, написаних мовами розмітки даних.

Найчастіше CSS використовують для візуальної презентації сторінок, написаних HTML та XHTML, але формат CSS може застосовуватися до інших видів XML-документів. Специфікації CSS були створені та розвиваються  Консорціумом Всесвітньої мережі. CSS має різні рівні та профілі. Наступний рівень CSS створюється на основі попередніх, додаючи нову функціональність або розширюючи вже наявні функції. Рівні позначаються як CSS1, CSS2 та CSS3. Профілі --- сукупність правил CSS одного або більше рівнів, створені для окремих типів пристроїв або інтерфейсів. Наприклад, існують профілі CSS для принтерів, мобільних пристроїв тощо. CSS (каскадна або блочна верстка) прийшла на заміну табличній верстці веб-сторінок. Головна перевага блочної верстки --- розділення змісту сторінки (даних) та їхньої візуальної презентації.

CSS використовується авторами та відвідувачами веб-сторінок, щоб визначити кольори, шрифти, верстку та інші аспекти вигляду сторінки. Одна з головних переваг --- можливість розділити зміст сторінки (або контент, наповнення, зазвичай HTML, XML або подібна мова розмітки) від вигляду документу (що описується в CSS). Таке розділення може покращити сприйняття та доступність контенту, забезпечити більшу гнучкість та контроль за відображенням контенту в різних умовах, зробити контент більш структурованим та простим, прибрати повтори тощо. 

CSS також дозволяє адаптувати контент до різних умов відображення (на екрані монітора, мобільного пристрою, у роздрукованому вигляді, на екрані телевізора, пристроях з підтримкою шрифту Брайля або голосових броузерах та ін.). Один і той самий HTML або XML документ може бути відображений по-різному залежно від використаного CSS.

\textit{JavaScript (JS)} --- динамічна, об'єктно-орієнтованa мова програмування. Найчастіше використовується як частина браузера, що надає можливість коду на стороні клієнта (такому, що виконується на пристрої кінцевого користувача) взаємодіяти з користувачем, керувати браузером, асинхронно обмінюватися даними з сервером, змінювати структуру та зовнішній вигляд веб-сторінки. Мова JavaScript також використовується для програмування на стороні серверу (подібно до таких мов програмування, як Java і C#), розробки ігор, стаціонарних та мобільних додатків, сценаріїв в прикладному ПЗ (наприклад, в програмах зі складу Adobe Creative Suite), всередині PDF-документів, тощо.

JavaScript класифікують як прототипну, скриптову мову програмування з динамічною типізацією. Окрім прототипної, JavaScript також частково підтримує інші парадигми програмування (імперативну та частково функціональну) і деякі відповідні архітектурні властивості, зокрема: динамічна та слабка типізація, автоматичне керування пам'яттю, прототипне наслідування, функції як об'єкти першого класу.

JavaScript, наразі, є однією з найпопулярніших мов програмування в інтернеті. Але спочатку багато професіональних програмістів скептично ставилися до мови, цільова аудиторія якої складалася з програмістів-любителів. Поява AJAX змінила ситуацію та повернула увагу професійної спільноти до мови. В результаті, були розроблені та покращені багато практик використання JavaScript (зокрема, тестування та налагодження), створені бібліотеки та фреймворки, поширилося використання JavaScript поза браузером \cite{11}.

\textit{Python} --- інтерпретована об'єктно-орієнтована мова програмування високого рівня з динамічною семантикою. Розроблена в 1990 році Гвідо ван Россумом. Структури даних високого рівня разом із динамічною семантикою та динамічним зв'язуванням роблять її привабливою для швидкої розробки програм, а також як засіб поєднання існуючих компонентів. Python підтримує модулі та пакети модулів, що сприяє модульності та повторному використанню коду. Інтерпретатор Python та стандартні бібліотеки доступні як у скомпільованій так і у вихідній формі на всіх основних платформах. В мові програмування Python підтримується декілька парадигм програмування, зокрема: об'єктно-орієнтована, процедурна, функціональна та аспектно-орієнтована.

Python має ефективні структури даних високого рівня та простий, але ефективний підхід до об'єктно-орієнтованого програмування. Елегантний синтаксис Python, динамічна обробка типів, а також те, що це інтерпретована мова, роблять її ідеальною для написання скриптів та швидкої розробки прикладних програм у багатьох галузях на більшості платформ.

Python портований і працює майже на всіх відомих платформах — від КПК до мейнфреймів. Існують порти під Microsoft Windows, всі варіанти UNIX (включаючи FreeBSD та GNU/Linux), Plan 9, Mac OS та Mac OS X, iPhone OS 2.0 і вище, Palm OS, OS/2, Amiga, AS/400 та навіть OS/390, Symbian та Android \cite{phyton}.

\textit{Ruby} --- це інтерпретована, повністю об'єктно-орієнтована мова програмування з чіткою динамічною типізацією. Мова відрізняється високою ефективністю розробки програм і увібрало в себе кращі риси Perl, Java, Python, Smalltalk, Eiffel, Ada і Lisp. Ruby поєднує в собі Perl-подібний синтаксис із об'єктно-орієнтованим підходом мови програмування Smalltalk. Також деякі риси запозичено із мов програмування Python, Lisp, Dylan та CLU.

Багатоплатформова реалізація інтерпретатора мови Ruby поширюється як вільне програмне забезпечення.

\subsection{Методи візуалізації карт}\hspace{\parindent}


\textit{Мапи Google} --- набір додатків, побудованих на основі безкоштовного картографічного сервісу і технологій, які надає компанія Google.

Сервіс являє собою карту та супутникові знімки всього світу (а також Місяця і Марса). З сервісом інтегрований бізнес-довідник і карта автомобільних доріг, з пошуком маршрутів, яка охоплює США, Канаду, Японію, Гонконг, Китай, Великобританію, Ірландію (тільки центри міст) і деякі райони Європи.

Існує можливість використовувати сервіс для створення своїх продуктів сторонніми компаніями. На сьогоднішній день це безкоштовна служба, але можливість додати рекламу залишена на майбутнє.

Для розробників сайтів зручно буде використати JavaScript для керування функціональністю карт, правда кількість запитів з одного сервера обмежена. Google Static Maps API дозволяє будувати статичні мапи за допомогою спеціальних url'ів. Також існують версії API під різні види мобільних пристроїв \cite{google}.

\textit{OpenStreetMap} --- це відкритий проект зі створення загальнодоступних мап світу силами спільноти. Проект заснований у Великобританії в липні 2004 року Стівом Костом (Steve Coast). У квітні 2006-го OSM зареєстровано як фонд. «Фонд OpenStreetMap --- міжнародна некомерційна організація, створена для підтримки розвитку та розповсюдження геопросторових даних, а також надання можливості використання геопросторових даних будь-ким».

Сайт OpenStreetMap надає інтерфейс «ковзаючої мапи» на основі JavaScript-бібліотеки Leaflet (до 23 листопада 2012 р. --- на OpenLayers), який наживо відображає мапу, використовуючи тайли, згенеровані Mapnik і тайли з інших джерел. Можна генерувати мапи локально, встановивши Mapnik та завантаживши дані.

Правити мапи можна безпосередньо у веб-переглядачі посередництвом редактора iD, HTML5-додатка, написаного з використанням D3.js компанією MapBox. Через веб-переглядач доступний також редактор Potlatch 2, написаний на Flash. JOSM та Merkaator --- потужніші програми для персонального комп'ютера, які краще пасуватимуть досвідченим користувачам.

\textit{Leaflet} --- це сучасна відкрита з вихідний кодом Java-бібліотека для мобільних інтерактивних карт. Вона розроблена Володимиром Агафонкіном з командою. При об’ємі всього близько 33 КБ JS, вона має всі функції, більшість розробникам коли-небудь може знадобитись для інтернет-карт.

Leaflet розроблена з метою простоти, продуктивності і зручності використання. Вона працює ефективно на всіх основних настільних і мобільних платформах, користуючись HTML5 та CSS3 на сучасних браузерах та все ще є доступною і на старих. Вона може бути розширеною величезною кількістю плагінів, має красивий, легкий у використанні і добре документований API і простий, легкий для читання вихідний код.
\subsection{Ресурси й інструменти для візуалізації} \hspace{\parindent}

Графіки і таблиці --- найкращий засіб для представлення даних в зручному для вивчення вигляді. Нижче представлений огляд з 15 бібліотек для створення різних форматів візуалізації з використанням програмного мови Javascript.

Бібліотека sigmajs призначена для малювання графів. Вона дозволяє публікувати графи на веб-сторінках і інтегрувати їх в додатки. Більшість параметрів налаштувань можна налаштувати на свій розсуд, включаючи інтерактивність графа.

BonsaiJS --- бібліотека з відкритим кодом, призначена для створення графіки та анімації. В бібліотеці є функція створення простих форм, а також функція path, що дозволяє створювати власні форми. Також у користувачів є можливість застосовувати різні кольори, градації і фільтри.

Chart.js використовує Javascript і HTML5 Canvas для побудови гістограм і різних типів діаграм: кругових, полярних, кільцевих і ін. Одна з переваг Chaart.js --- дизайнерське оформлення і можливість використання анімаційних ефектів.

 Aristochart дозволяє будувати двомірні лінійні статичні графіки. Програма передбачає набір можливостей по дизайнерському оформленню, зміни міток, інших елементів графіка та його адаптації.
 
 JS Сharts --- генераторів графіків і схем, що не вимагає великих знань в програмуванні, будь-яких плагінів або серверних модулів. JS Сharts дозволяє створювати схеми на основі різних шаблонів, таких як стовпці, кругові діаграми і прості лінії. Бібліотека сумісна з більшістю веб-браузерів.
 
 Бібліотека Highcharts JS дозволяє легко додавати інтерактивні і анімовані графіки на сайт або у веб-додатки. Підтримується безліч видів діаграм: лінійні, кругові, колонні розсіюють, тощо. Програма працює з усіма популярними видами браузерів, включаючи Safari і iPhone.
 
 Flot --- Javascript-бібліотека, що дозволяє швидко створювати динамічні графіки, сумісні з будь-якими браузерами та операційними системами. Для використання Flot буде потрібно бібліотека jQuery.
 
 AwesomeChartJs --- проста у використанні Java-sript бібліотека, за допомогою якої можна швидко створити такі види графіків: вертикальні і горизонтальні стовпці, лінійно-столбцовая графіки, кругові, кругові розсувні і кільцеві діаграми. Налаштування зовнішнього вигляду сильно обмежені.
 
 FusionCharts --- пакет побудови діаграм з відкритим вихідним кодом для побудови flash-графіків, призначених для візуалізації даних в додатках і презентаціях. Додаткові можливості FusionCharts відкриваються після оплати.
 
 JSXGraph --- розроблена в Байротському Університеті бібліотека, використовувана для відображення геометричних креслень в веб-браузері.
 
 Arbor.js використовує бібліотеку jQuery для малювання графів прямо в браузері.
 
 Micropolar --- бібліотека інтегрована з D3.js і призначена для побудови графіків в полярних системах координат.
 
 Morris --- бібліотека з відкритим вихідним кодом, за допомогою якої можна будувати графіки на простий сітці горизонтальних ліній. Для роботи з Morris будуть потрібні бібліотеки jQuery і Raphal.
 
 Dygraphs --- ще одна бібліотека з відкритим кодом, призначена для малювання часових рядів. Графіками можна додавати елементи інтерактивності.
 
JFreeChart --- безкоштовна бібліотека з відкритим кодом, що дозволяє створювати графіки для додатків. Програма підтримує широкий спектр типів діаграм і багато типів вихідних форматів \cite{11}.

\subsection{Порівняльна характеристика SVG і Canvas} \hspace{\parindent}

HTML5 Canvas і SVG --- веб-технології, які дозволяють використовувати високоякісну графіку в браузерах, але фундаментально вони докорінно відрізняються один від одного.

SVG --- векторний графічний формат, заснований на XML. SVG-контент може бути статичним, динамічним, інтерактивним і анімованим - він дуже гнучкий. Також є можливим зміна оформлення SVG за допомогою CSS і визначення поведінки об'єктів за допомогою SVG DOM. І звичайно, так як текст всередині SVG зберігається у файлі, він залишається відносно доступним для використання. Також SVG-контент можна вставити безпосередньо в HTML з використанням елементу object.

За допомогою SVG можна отримати набагато більше, ніж просто векторну графіку і анімацію. Можна розробити високоінтерактівний веб-додаток з розширеними анімаційними подіями, фільтрами, тощо.

Специфікація HTML5 Canvas визначає універсальний JavaScript API, що дозволяє виконувати операції створення об'єктів. Для малювання на канві можна використовувати два різні підходи: 2D-підхід, 3D-підхід (WebGL).

Перший краще впроваджений і доступний у всіх сучасних веб-браузерах, в той час як другий знаходиться на ранній стадії визначення, маючи лише кілька експериментальних реалізацій.

\begin{table}[H]
\caption{\label{tab:good}Порівняння переваг SVG і Canvas.}
\begin{center}
\begin{tabular}{|p{8cm}|p{8cm}|}
\hline
\emph{Canvas} & \emph{SVG} \\
\hline
-- Висока продуктивність при відображенні будь-яких 2D об'єктів. & -- SVG дозволяє масштабувати зображення при різних розширеннях екрану.\\ 
-- Стабільна продуктивність. Продуктивність падає тільки при збільшенні розширення зображення. &-- SVG дуже добре підтримує анімацію. Елементи можуть бути анімовані з використанням описового синтаксису або за допомогою JavaScript.\\ 
-- Можна зберегти отримане зображення в PNG або JPG файл. &-- Можна отримати повний контроль над кожним елементом, використовуючи SVG DOM API в JavaScript.\\ 
-- Найкраще підходить для створення растрової графіки, редагування зображень і операцій, що вимагають маніпулювання на рівні пікселів. &-- SVG зберігається у форматі XML, що надає більше можливостей браузерам із забезпечення доступності SVG документів у порівнянні з елементом canvas. Таким чином, SVG виглядає кращим рішенням для користувача інтерфейсів веб-додатків.\\
\hline
\end{tabular}
\end{center}
\end{table} 

\begin{table}[H]
\caption{\label{tab:bad}Порівняння недоліків SVG і Canvas.}
\begin{center}
\begin{tabular}{|p{8cm}|p{8cm}|}
\hline
\emph{Canvas} & \emph{SVG}  \\
\hline
-- Піксельна побудова. & -- Низька швидкість рендринга при збільшенні складності документа (малюнка), так як використовується модель DOM\\ 
 -- Не існує API для анімації. Доведеться використовувати таймери або інші події для поновлення канви. & -- SVG не підходить для таких додатків як ігри.\\ 
-- Слабкі можливості по рендерингу тексту. & \\ 
-- HTML 5 Canvas не підходить для створення веб-сайтів або інтерфейсів веб-додатків, користувацькі інтерфейси зазвичай повинні бути динамічними та інтерактивними, а Canvas вимагає від вас постійного перемальовування кожного елемента в інтерфейсі. & \\
\hline
\end{tabular}
\end{center}
\end{table} 

Кожна технологія має свою область застосування. HTML 5 Canvas слід використовувати для:
\begin{itemize}
 \item редагування зображень;
 \item створення растрової графіки;
 \item аналізу зображень;
 \item створення ігрової графіки.
 \end{itemize}
 
 SVG слід використовувати для:
\begin{itemize}
 \item створення користувацьких інтерфейсів веб-додатків, незалежних від розширення екрану;
 \item високоінтерактивних анімованих користувацьких інтерфейсів;
 \item графіків і діаграм;
 \item редагування векторних зображень.
 \end{itemize}

\section{Висновки до розділу~\ref{ch:03}}

В результаті наведення методів та засобів вирішення проблеми, було здійснено огляд можливих та вибір тих які застосовуватимуться, а саме --- мовою  програмування яка використовується для реалізації є JavaScript. Для розмітки буде використано HTML5, а для редагування стилів CSS. Для створення зображень використовуватиметься формат SVG, оскільки він найкраще підходить для веб-додатків.